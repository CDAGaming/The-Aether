buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:5.+"
    }
}

plugins {
    id 'maven-publish'
    id "com.modrinth.minotaur" version "1.2.1"
}

apply plugin: "net.minecraftforge.gradle"

JavaVersion targetVersion = JavaVersion.VERSION_16

allprojects {
    sourceCompatibility = targetVersion
    targetCompatibility = targetVersion
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
    mappings channel: 'official', version: "${mc_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            //Only uncomment this if you actually need the debug logging! If you enable this the log will be full of incredibly useless information spam
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            property 'mixin.env.disableRefMap', 'true'
            arg "--mixin=aether.mixins.json"

            mods {
                the_aether {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            //Only uncomment this if you actually need the debug logging! If you enable this the log will be full of incredibly useless information spam
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            property 'mixin.env.disableRefMap', 'true'
            arg "--mixin=aether.mixins.json"

            mods {
                the_aether {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            //args '--mod', 'the_aether', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources/')

            environment 'target', 'fmluserdevdata'

            mods {
                the_aether {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.loader_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version

    // replace stuff in mods.toml, nothing else
    filesMatching("META-INF/mods.toml") {
        // replace version and mcversion
        expand 'version': project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = 'UTF-8'

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    if (targetVersion.isJava9Compatible()) {
        it.options.release = Integer.parseInt(targetVersion.getMajorVersion())
    }
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

//task publishModrinth (type: TaskModrinthUpload){
//    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//    System.out.println("Enter the modrinth auth token: ");
//    token = br.readLine(); // Get password
//    projectId = 'IKpsG0nF'
//    System.out.println("Enter the version number:");
//    versionNumber = br.readLine();
//    System.out.println("Enter the version name:");
//    versionName = br.readLine();
//    uploadFile = jar // This is the java jar task
//    System.out.println("Enter the game version number: (See minotaur docs for valids)");
//    addGameVersion(br.readLine());
//    System.out.println("Enter changelog:");
//    changelog = br.readLine();
//    addLoader('fabric')
//}

jar {
    manifest {
        attributes 'Implementation-Title': 'AetherReborn',
                'Implementation-Version': project.version,
                'Main-Class': 'com.aether.executable.InstallerGUI',
                'MixinConfigs': 'the_aether.mixins.json'
    }
    from "LICENSE.md"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

//build {
//    dependsOn downloadTranslations
//}

//compileJava {
//    source = processSource.outputs
//}
